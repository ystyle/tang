package tang

import std.unittest.*
import std.unittest.testmacro.*

struct CleanTest {
    CleanTest(let path:String, let result:String){}
}

var cleanTests = Array<CleanTest>([
    // Already clean
    CleanTest("/", "/"),
    CleanTest("/abc", "/abc"),
    CleanTest("/a/b/c", "/a/b/c"),
    CleanTest("/abc/", "/abc/"),
    CleanTest("/a/b/c/", "/a/b/c/"),
    
    // missing root
    CleanTest("", "/"),
    CleanTest("abc", "/abc"),
    CleanTest("abc/def", "/abc/def"),
    CleanTest("a/b/c", "/a/b/c"),

    // Remove doubled slash
    CleanTest("//", "/"),
    CleanTest("/abc//", "/abc/"),
    CleanTest("/abc/def//", "/abc/def/"),
    CleanTest("/a/b/c//", "/a/b/c/"),
    CleanTest("/abc//def//ghi", "/abc/def/ghi"),
    CleanTest("//abc", "/abc"),
    CleanTest("///abc", "/abc"),
    CleanTest("//abc//", "/abc/"),

    // Remove . elements
    CleanTest(".", "/"),
    CleanTest("./", "/"),
    CleanTest("/abc/./def", "/abc/def"),
    CleanTest("/./abc/def", "/abc/def"),
    CleanTest("/abc/.", "/abc/"),

    // Remove .. elements
    CleanTest("..", "/"),
    CleanTest("../", "/"),
    CleanTest("../../", "/"),
    CleanTest("../..", "/"),
    CleanTest("../../abc", "/abc"),
    CleanTest("/abc/def/ghi/../jkl", "/abc/def/jkl"),
    CleanTest("/abc/def/../ghi/../jkl", "/abc/jkl"),
    CleanTest("/abc/def/..", "/abc"),
    CleanTest("/abc/def/../..", "/"),
    CleanTest("/abc/def/../../..", "/"),
    CleanTest("/abc/def/../../..", "/"),
    CleanTest("/abc/def/../../../ghi/jkl/../../../mno", "/mno"),

    // Combinations
    CleanTest("abc/./../def", "/def"),
    CleanTest("abc//./../def", "/def"),
    CleanTest("abc/../../././../def", "/def")
])

/* ===== Emitted by MacroCall @Test in path_test.cj:61:1 ===== */
/* 61.1 */@Attribute[TEST_GENERATED] class TestCase_TestPathClean <: TestClass {
/* 61.2 */    init() {
/* 61.3 */    }
/* 61.4 */    private func classConfiguration(): Configuration {
/* 61.5 */        let configuration = Configuration()
/* 61.6 */        configuration.set(KeyFromTopLevel.fromTopLevel, true)
/* 61.7 */        
/* 61.8 */        return configuration
/* 61.9 */    }
/* 61.10 */    public override func asTestSuite(): TestSuite {
/* 61.11 */        
/* 61.12 */        let suiteConfiguration = classConfiguration()
/* 61.13 */        let suiteBuilder = TestSuite.builder("TestCase_TestPathClean").configure(suiteConfiguration)
/* 61.14 */        
/* 61.15 */        { => let caseConfig = Configuration()
/* 61.16 */            caseConfig.set(KeyFromTopLevel.fromTopLevel, true)
/* 61.17 */            
/* 61.18 */            let TestPathCleanTestFunc = { => TestPathClean();() }
/* 61.19 */            suiteBuilder.add(
/* 61.20 */            UnitTestCase.create(
/* 61.21 */            "TestPathClean",
/* 61.22 */            configuration: caseConfig,
/* 61.23 */            body: TestPathCleanTestFunc
/* 61.24 */            )
/* 61.25 */            )
/* 61.26 */            
/* 61.27 */        }()
/* 61.28 */        
/* 61.29 */        return suiteBuilder.build()
/* 61.30 */    }
/* 61.31 */    private func inheritedFromClassAnnotatedByTestTemplate < T >(): TestSuite where T <: TestClass {
/* 61.32 */        throw Exception("Unreachable code")
/* 61.33 */    }
/* 61.34 */}
/* 61.35 */func TestPathClean(): Unit {
/* 61.36 */    for(test in cleanTests) {
/* 61.37 */        let s1 = cleanPath(test.path)
/* 61.38 */        if(s1 != test.result) {
/* 61.39 */            throw Exception("Clean(${test.path}) = ${s1}, want ${test.result}")
/* 61.40 */        }
/* 61.41 */        let s2 = cleanPath(test.result)
/* 61.42 */        if(s2 != test.result) {
/* 61.43 */            throw Exception("Clean(${test.result}) = ${s2}, want ${test.result}")
/* 61.44 */        }
/* 61.45 */    }
/* 61.46 */}
/* 61.47 */
/* 61.48 */
/* 61.49 */interface TestPackageExtension_TestCase_TestPathClean {
/* 61.50 */    func registerTestCase_TestPathClean(): Unit
/* 61.51 */}
/* 61.52 */extend TestPackage <: TestPackageExtension_TestCase_TestPathClean {
/* 61.53 */    @Attribute[TEST_REGISTER]
/* 61.54 */    public func registerTestCase_TestPathClean() {
/* 61.55 */        registerSuite({ => TestCase_TestPathClean().asTestSuite() })
/* 61.56 */    }
/* 61.57 */}
/* 61.58 */
/* ===== End of the Emit ===== */